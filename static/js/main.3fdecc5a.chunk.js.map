{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","height","CardList","robots","cardArray","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","console","log","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCFSC,EAdF,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,KAAKC,EAAuBF,EAAvBE,MAAMC,EAAiBH,EAAjBG,GAEvB,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA2BP,GAAMQ,OAAO,UAC5DP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cAAML,GACNG,EAAAC,EAAAC,cAAA,aAAKJ,MCWFU,EAnBE,SAAAZ,GAAc,IAAZa,EAAYb,EAAZa,OAEXC,EAAYD,EAAOE,IAAI,SAACC,EAAKC,GACjC,OACEb,EAAAC,EAAAC,cAACY,EAAD,CACGC,IAAKF,EACLd,GAAIU,EAAOI,GAAGd,GACdF,KAAMY,EAAOI,GAAGhB,KAChBC,MAAOW,EAAOI,GAAGf,UAIxB,OACEE,EAAAC,EAAAC,cAAA,WACGQ,ICFQM,EAZG,SAAApB,GAA+BA,EAA7BqB,YAA6B,IAAjBC,EAAiBtB,EAAjBsB,aAC9B,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,SACKiB,KAAK,SACLC,YAAc,iBACdC,SAAUH,MCMRI,SAPD,SAACC,GACb,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMqB,MAAO,CAACC,UAAU,SAASC,OAAO,oBAAoBnB,OAAO,UAC/EgB,EAAMI,SADT,OC6CWC,cA9Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,eAAgB,SAACC,GACbR,EAAKS,SAAS,CAACrB,YAAYoB,EAAME,OAAOC,SAR1CC,QAAQC,IAAI,iBACZb,EAAKc,MAAM,CACTlC,OAAQ,GACRQ,YAAY,IALHY,mFAaM,IAAAe,EAAAZ,KACjBa,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKN,SAAS,CAAC7B,OAAOwC,MAEzCR,QAAQC,IAAI,wDAGN,IAAAQ,EAEqBlB,KAAKW,MAAzBlC,EAFDyC,EAECzC,OAAOQ,EAFRiC,EAEQjC,YACRkC,EAAkB1C,EAAO2C,OAAO,SAAA3C,GAClC,OAAOA,EAAOZ,KAAKwD,cACbC,SAASrC,EACToC,iBAGZ,OAAmB,IAAhB5C,EAAO8C,OACDvD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBAILH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUjD,OAAQ0C,aAzCdQ,aCDlBC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAAOC,SAASC,eAAe,SN4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.3fdecc5a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nconst Card = ( {name,email,id}/*props*/) => {\n  // const {name,email,id}=props;\n    return (\n\n      <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\n        <img alt='robot' src ={`https://robohash.org/${id}`} height='200px'/>\n        <div>\n            <h2> {name}</h2>\n            <p> {email}</p>\n        </div>\n      </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nconst CardList = ({robots}) => {\n\n  const cardArray = robots.map((user,i) =>{\n    return (\n      <Card\n         key={i}\n         id={robots[i].id}\n         name={robots[i].name}\n         email={robots[i].email}\n         />)\n  });\n\n  return (\n    <div>\n      {cardArray}\n    </div>\n);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchField,searchChange}) =>{\n  return (\n    <div className='tc'>\n        <input\n             type='search'\n             placeholder = 'search robotos'\n             onChange={searchChange}\n        />\n    </div>\n  );\n}\n\nexport default SearchBox\n","import React from 'react';\n\n/*\nprops\nstate\nchild\n*/\nconst Scroll =(props) =>{\n  return(\n    <div className='ma3' style={{overflowY:'scroll',border:'2px solid #234223',height:'490px'}} >\n      {props.children};\n    </div>\n  );\n};\nexport default Scroll;\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from './Robot';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nclass App extends Component{\n\n  constructor(){\n    super();\n    console.log(\"costruction 1\");\n    this.state={\n      robots: [],\n      searchField:''\n    }\n  }\n\n  onSearchChange= (event)=> {\n      this.setState({searchField:event.target.value});\n    }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots:users}));\n    // this.setState({robots:robots});\n    console.log(\"componentDidMount 3\");\n  }\n\n  render(){\n    // console.log(\"render 2\");\n    const {robots,searchField}=this.state;\n    const filteredRobots =  robots.filter(robots => {\n        return robots.name.toLowerCase()\n             .includes(searchField\n             .toLowerCase())\n           }\n  );\n  if(robots.length===0){\n    return <h1 className='tc'> Loading.... </h1>\n  }else{\n\n    return (\n      <div className='tc'>\n          <h1 className='f1'> robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n              <CardList robots={filteredRobots}/>\n          </Scroll>\n      </div>\n    );\n  }}\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}